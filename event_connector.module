<?php
/**
 * @file
 * Event connector module to connect Kyyti to Evant calendar.
 */

/**
 * Evant api list taxonomies machine names.
 */
define('EVENT_CONNECTOR_AREA_VOC', 'ec_areas');
define('EVENT_CONNECTOR_CATEGORY_VOC', 'ec_categories');
define('EVENT_CONNECTOR_TARGET_GROUP_VOC', 'ec_target_groups');

/**
 * Implements hook_help().
 */
function event_connector_help($path, $arg) {
  if ($path == 'admin/help#event_connector') {
    return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implemtents hook_menu().
 */
function event_connector_menu() {
  $items = array();
  $items['admin/structure/event_connector'] = array(
    'title' => 'Event Calendar',
    'description' => 'Settings for event field mappings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('event_connector_mapping'),
    'file' => 'event_connector.admin.inc',
    'access arguments' => array('administer event connector'),
  );
  $items['admin/structure/event_connector/settings'] = array(
    'title' => 'Settings',
    'description' => 'Modules settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('event_connector_settings'),
    'access arguments' => array('administer event connector'),
    'file' => 'event_connector.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/event_connector/lists'] = array(
    'title' => 'Lists',
    'description' => 'List from api.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('event_connector_list_page'),
    'access arguments' => array('administer event connector'),
    'file' => 'event_connector.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/event_connector/general'] = array(
    'title' => 'Field mappings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  return $items;
}

/**
 * Implements hook_perm().
 */
function event_connector_permission() {
  return array(
    'administer event connector' => array(
      'title' => t('Administer Event Connector', array(),
        array('context' => 'event_connector')),
    ),
  );
}

/**
 * Filed mappings form.
 */
function event_connector_field_mappings(&$form, $items, $defs) {
  $filename = drupal_get_path('module', 'event_connector');
  $filename .= '/event_description.json';

  if (file_exists($filename)) {
    $json = file_get_contents($filename);
    $event_data = json_decode($json);

    foreach ($event_data as $key => $item) {
      if ($key != 'data') {
        continue;
      }
      $fields = current($item);

      foreach ($fields as $idx => $value) {
        $title = ucfirst(str_replace('_', ' ', $idx));
        $level = is_object($value) ? 'level_' . $idx . '-obj' : 'level_' . $idx . '-arr';
        $form[$level] = array(
          '#type' => 'fieldset',
          '#title' => $title,
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#tree' => TRUE,
        );

        if (is_object($value)) {
          foreach ($value as $caption => $field) {
            $title = ucfirst(str_replace('_', ' ', $caption));
            $form[$level]['event_connector_' . $caption] = array(
              '#type' => 'select',
              '#title' => $title,
              '#default_value' => isset($defs[$level]['event_connector_' . $caption]) ? $defs[$level]['event_connector_' . $caption] : '',
              '#options' => $items,
            );
          }
        }
        else {
          $arr_value = current($value);
          foreach ($arr_value as $caption => $field) {
            $title = ucfirst(str_replace('_', ' ', $caption));
            $form[$level]['event_connector_' . $caption] = array(
              '#type' => 'select',
              '#title' => $title,
              '#default_value' => isset($defs[$level]['event_connector_' . $caption]) ? $defs[$level]['event_connector_' . $caption] : '',
              '#options' => $items,
            );
          }
        }
      }
    }
  }

  return $form;
}

/**
 * Implements hook_insert().
 */
function event_connector_node_insert($node) {
  $our_event_type = variable_get('event_connector_type', '');
  if ($our_event_type == $node->type &&
      $node->status == 1 &&
      $node->field_ulkoiseen_tapahtumakalente[LANGUAGE_NONE][0]['value'] == 1) {
    _event_connector_send_to_calendar($node);
  }
}

/**
 * Implements hook_update().
 */
function event_connector_node_update($node) {
  $our_event_type = variable_get('event_connector_type', '');
  if ($our_event_type == $node->type &&
      $node->status == 1 &&
      $node->field_ulkoiseen_tapahtumakalente[LANGUAGE_NONE][0]['value'] == 1) {
    _event_connector_send_to_calendar($node);
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 */
function event_connector_workbench_moderation_transition($node, $previous_state, $new_state) {
  $our_event_type = variable_get('event_connector_type', '');
  if ($our_event_type == $node->type &&
      $node->field_ulkoiseen_tapahtumakalente[LANGUAGE_NONE][0]['value'] == 1 &&
      $node->workbench_moderation['current']->published == TRUE) {
    _event_connector_send_to_calendar($node);
  }
}

/**
 * Send event to external event calendar.
 *
 * @param object $node
 *    Event node.
 */
function _event_connector_send_to_calendar($node) {
  $been_here = &drupal_static(__FUNCTION__);
  if (isset($been_here)) {
    return;
  }
  else {
    $been_here = 'Processed!';
  }

  $map = variable_get('event_connector_mappings', array());

  $data = array();
  $data['apikey'] = variable_get('event_connector_apikey', '');
  $lang = isset($node->language) ? $node->language : LANGUAGE_NONE;
  $data['languages'] = array($lang);
  $data['test'] = variable_get('event_connector_test', FALSE) ? 'true' : 'false';

  foreach ($map as $level => $arr) {
    list($level_start, $level_type) = explode('-', $level);
    $level_name = substr($level_start, 6);
    if (empty($arr)) {
      continue;
    }
    $block = array();
    foreach ($arr as $key => $value) {
      $field_name = substr($key, 16);
      $field_value = _event_connector_fetch_node_field_value($node, $value);

      if ($field_value !== NULL) {
        $block[$field_name] = $field_value;
      }
    }
    if (empty($block)) {
      continue;
    }
    if ($level_type == 'arr') {
      $rows[$level_name][] = $block;
    }
    else {
      $rows[$level_name] = $block;
    }
  }
  $data['data'][] = $rows;

  // dpm($data);
  $json_data = json_encode($data);

  if (variable_get('event_conn_log', FALSE)) {
    watchdog('Event Conn', 'Json data to send: @json', array('@json' => $json_data), WATCHDOG_DEBUG);
  }

  if (variable_get('event_local_test', TRUE)) {
    drupal_set_message('Message send to Event calendar:');
    drupal_set_message($json_data);
    return;
  }
  // Pull the url out of the drupal settings.
  $url = variable_get('event_connector_apiurl', '');
  if ($url != '') {
    $url .= 'events/create';
    $response = drupal_http_request($url, array(
      'method' => 'POST',
      'data' => $json_data,
      'max_redirects' => 0,
      'headers' => array(
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
      ),
    ));

    if (variable_get('event_conn_log', FALSE)) {
      watchdog('Event Conn', 'Response from api: @response', array('@response' => print_r($response, TRUE)), WATCHDOG_DEBUG);
    }

    if ($response->code != 200) {
      watchdog('event connector', 'Return code @code, error: @msg', array(
        '@code' => $response->code,
        '@msg' => $response->data,
      ));
      drupal_set_message(t('Event send failed. Return code @code, error: @msg', array(
        '@code' => $response->code,
        '@msg' => $response->data,
      )), 'error');
    }
    else {
      drupal_set_message(t('Event send successful to Kymenlaakso tapahtumakalenteri.'));
    }
  }

}

/**
 * Get field value from node.
 *
 * @param object $node
 *    Node to save.
 * @param string $field
 *    Field name to get data.
 *
 * @return string
 *    Value for field.
 */
function _event_connector_fetch_node_field_value($node, $field) {
  $parts = explode('-', $field);
  while (count($parts) < 3) {
    $parts[] = NULL;
  }
  list($name, $delta, $type) = $parts;

  $result = '';
  $lang = isset($node->language) ? $node->language : LANGUAGE_NONE;

  if (strpos($name, 'field_') === 0) {
    if (isset($delta)) {
      if (isset($node->{$name}[LANGUAGE_NONE][0][$delta])) {
        $value = $node->{$name}[LANGUAGE_NONE][0][$delta];
      }
      else {
        return NULL;
      }
    }
    else {
      $value = isset($node->{$name}[LANGUAGE_NONE][0]['value']) ?
        $node->{$name}[LANGUAGE_NONE][0]['value'] : '';
    }
    if ($value == NULL) {
      return $value;
    }

    switch ($type) {
      case 'date':
        // Time in Drupal is UTC.
        $timestamp = strtotime($value . '+00:00');
        $result = date('c', $timestamp);
        break;

      case 'term':
        $result = '';
        $wrapper = entity_metadata_wrapper('node', $node);
        $term_value = $wrapper->{$name}->value();
        if (module_exists('devel')) {
          dd($term_value, 'term value');
        }
        if (isset($term_value)) {
          if (is_object($term_value)) {
            $term_value = array($term_value);
          }
          $term_result = '';
          foreach ($term_value as $val) {
            if (isset($val->field_caterory_term_id)) {
              $term_result .= $val->field_caterory_term_id[LANGUAGE_NONE][0]['value'] . ', ';
            }
            else {
              $term_result .= $val->name . ', ';
            }
          }
          $result = substr($term_result, 0, -2);
        }
        drupal_alter('event_connector_term', $name, $value, $result);
        break;

      case 'image':
        $file = file_load($value);
        $filename = drupal_realpath($file->uri);
        $img = file_get_contents($filename);
        $image_str = base64_encode($img);
        $result = array(
          $lang => array(
            'filename' => $file->filename,
            'data' => $image_str,
          ),
        );
        break;

      default:
        $result = $value;
        break;
    }

  }
  else {
    if ($name == 'title') {
      $result = $node->title;
    }
    elseif ($name == 'published') {
      if (isset($node->workbench_moderation['current'])) {
        $result = $node->workbench_moderation['current']->published ? '1' : '0';
      }
      else {
        $result = $node->status ? '1' : '0';
      }
    }
  }
  // ToDo: Information about language depended fields must be come from
  // settings page.
  $lang_fields = array(
    'title',
    'published',
    'field_tapahtuman_kuvaus',
    'field_tapahtumapaikka',
  );
  if (in_array($name, $lang_fields)) {
    $result = array($lang => $result);
  }

  return $result;
}

/**
 * Query list from api.
 *
 * @param string $list
 *    List to query.
 *
 * @return array
 *    Result list.
 */
function event_connector_get_list($list) {
  $data = array();
  $data['apikey'] = variable_get('event_connector_apikey', '');
  $data['languages'] = array('fi');
  $json_data = json_encode($data);

  // Pull the url out of the drupal settings.
  $url = variable_get('event_connector_apiurl', '');
  if ($url != '') {
    $url .= $list;
    $response = drupal_http_request($url, array(
      'method' => 'POST',
      'data' => $json_data,
      'max_redirects' => 0,
      'headers' => array(
        'Content-Type' => 'application/json',
        'Accept' => 'application/json',
      ),
    ));

    if ($response->code != 200) {
      watchdog('event connector', 'List query "@list". Return code @code, error: @msg', array(
        '@list' => $list,
        '@code' => $response->code,
        '@msg' => $response->data,
      ));
      drupal_set_message(t('List query "@list". Event send failed. Return code @code, error: @msg', array(
        '@list' => $list,
        '@code' => $response->code,
        '@msg' => $response->data,
      )), 'error');
    }

    $result = json_decode($response->data);
    if ($result->success == 'TRUE') {
      $ret = array();
      foreach ($result->data as $row) {
        $ret[$row->id] = $row->title;
      }
      return $ret;
    }
    else {
      return array();
    }
  }
}

/**
 * Clear and update taxonomy.
 *
 * @param string $voc_name
 *    Vocabulary name to update.
 * @param string $api_path
 *    Path extension where values are fetch.
 */
function event_connector_update_taxonomy($voc_name, $api_path) {
  $list = event_connector_get_list($api_path);
  $myvoc = taxonomy_vocabulary_machine_name_load($voc_name);
  $tree = taxonomy_get_tree($myvoc->vid);
  // Delete all current termms.
  foreach ($tree as $term) {
    taxonomy_term_delete($term->tid);
  }
  // Add new terms.
  foreach ($list as $key => $value) {
    $term = new stdClass();
    $term->vid = $myvoc->vid;
    $term->name = $value;
    $term->field_caterory_term_id[LANGUAGE_NONE][0]['value'] = $key;
    taxonomy_term_save($term);
  }
}

/**
 * Return list fetch from api.
 *
 * @param string $api_path
 *    Path extension where values are fetch.
 *
 * @return array
 *    Category list.
 */
function _event_connector_fetch_list($api_path) {
  $list = event_connector_get_list($api_path);
  $rows = array();
  foreach ($list as $key => $value) {
    $rows[] = array(
      array('data' => $key),
      array('data' => $value),
    );
  }
  return $rows;
}
